import { Code } from "@/components/common/Code";
import { DropZone, generateUploadFiles } from "@/components/DropZone";
import { UploadFilesForm } from "@/components/UploadFilesForm";
import { useAppContext } from "@/contexts/AppContext";
import { useProjectsContext } from "@/contexts/ProjectsContext";
import { Project } from "@/types";
import { BackgroundTask, CreateProjectError } from "@/utils/webserver-utils";
import DriveFolderUploadOutlinedIcon from "@mui/icons-material/DriveFolderUploadOutlined";
import WarningIcon from "@mui/icons-material/Warning";
import Alert from "@mui/material/Alert";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogTitle from "@mui/material/DialogTitle";
import LinearProgress, {
  LinearProgressProps,
} from "@mui/material/LinearProgress";
import Stack from "@mui/material/Stack";
import { alpha } from "@mui/material/styles";
import TextField from "@mui/material/TextField";
import Typography from "@mui/material/Typography";
import { fetcher, HEADER, uuidv4, validURL } from "@orchest/lib-utils";
import React from "react";
import { useImportGitRepo, validProjectName } from "./hooks/useImportGitRepo";

const ERROR_MAPPING: Record<CreateProjectError, string> = {
  "project move failed": "failed to move project because the directory exists.",
  "project name contains illegal character":
    "project name contains illegal character(s).",
} as const;

const getMappedErrorMessage = (key: CreateProjectError | string | null) => {
  if (key && ERROR_MAPPING[key] !== undefined) {
    return ERROR_MAPPING[key];
  } else {
    return "Unknown error. Please try again.";
  }
};

const getProjectNameFromUrl = (importUrl: string) => {
  const matchGithubRepoName = importUrl.match(/\/([^\/]+)\/?$/);
  return matchGithubRepoName ? matchGithubRepoName[1] : "";
};

const HelperText: React.FC = ({ children }) => (
  <Typography
    variant="caption"
    sx={{
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
    }}
  >
    <WarningIcon
      sx={{
        marginRight: (theme) => theme.spacing(1),
        fontSize: (theme) => theme.typography.subtitle2.fontSize,
      }}
    />
    {children}
  </Typography>
);

const validateImportUrl = (
  importUrl: string
): { error: boolean; helperText: React.ReactNode } => {
  if (!validURL(importUrl))
    return {
      error: true,
      helperText: (
        <HelperText>
          Please make sure you enter a valid HTTPS git-repo URL.
        </HelperText>
      ),
    };

  // if the URL is not from Orchest, warn the user about it.
  const isOrchestExample = /^https:\/\/github.com\/orchest(\-examples)?\//.test(
    importUrl
  );

  if (!isOrchestExample)
    return {
      error: false,
      helperText: (
        <HelperText>
          The import URL was not from Orchest. Make sure you trust this git
          repository.
        </HelperText>
      ),
    };

  return { error: false, helperText: " " };
};

export const ImportDialog: React.FC<{
  importUrl: string;
  setImportUrl: (url: string) => void;
  onImportComplete: (newProject: Pick<Project, "path" | "uuid">) => void;
  open: boolean;
  onClose: () => void;
  hideUploadOption?: boolean;
  filesToUpload?: FileList | File[];
}> = ({
  importUrl,
  setImportUrl,
  onImportComplete,
  open,
  onClose,
  hideUploadOption,
  filesToUpload,
}) => {
  const { setAlert } = useAppContext();
  const { state, dispatch } = useProjectsContext();

  // Because import will occur before user giving a name,
  // a temporary projectName (`project.path`) is needed to start with.
  // Once project is created (i.e. projectUuid is generated by BE),
  // use `projectUuid` to rename the project as user desires.
  // NOTE: everytime the dialog is open, a new uuid should be generated.
  const [projectName, setProjectName] = React.useState<string>("");
  const [tempProjectName, setTempProjectName] = React.useState<string>();

  React.useEffect(() => {
    if (open) setTempProjectName(uuidv4());
  }, [open]);

  const [
    shouldShowImportUrlValidation,
    setShouldShowImportUrlValidation,
  ] = React.useState(false);

  const [importStatus, setImportStatus] = React.useState<
    "READY" | "IMPORTING" | "IMPORTED" | "SAVING"
  >("READY");

  const isAllowedToClose = React.useMemo(() => {
    return ["READY"].includes(importStatus);
  }, [importStatus]);

  const onFinishedImportingGitRepo = React.useCallback(
    async (result: BackgroundTask | undefined) => {
      if (!result) {
        // failed to import
        setImportStatus("READY");
        return;
      }
      if (result.status === "FAILURE") {
        setImportStatus("READY");
        setShouldShowImportUrlValidation(false);
      }
      if (result.status === "SUCCESS") {
        setImportStatus("IMPORTED");
        setProgress(100);
        // result.result is project.path (tempProjectName), but project_uuid is not yet available,
        // because it requires a file-discovery request to instantiate `project_uuid`.
        // Therefore, send another GET call to get its uuid.
        const projects = await fetcher<Project[]>("/async/projects");
        dispatch({ type: "SET_PROJECTS", payload: projects });

        const foundProject = projects.find(
          (project) => project.path === result.result
        );

        if (foundProject) setNewProjectUuid(foundProject.uuid);

        // Prefill projectName for user if user hasn't filled in anything.
        if (!projectName) setProjectName(getProjectNameFromUrl(importUrl));
      }
    },
    [dispatch, projectName, importUrl]
  );

  const {
    startImport: fireImportGitRepoRequest,
    importResult,
    clearImportResult,
  } = useImportGitRepo(tempProjectName, importUrl, onFinishedImportingGitRepo);

  const [newProjectUuid, setNewProjectUuid] = React.useState("");

  const startImportGitRepo = () => {
    setImportStatus("IMPORTING");
    setProgress("unknown");
    fireImportGitRepoRequest();
  };

  const closeDialog = () => {
    setShouldShowImportUrlValidation(false);
    setImportUrl("");
    setProjectName("");
    setImportStatus("READY");
    onClose();
  };

  const importUrlValidation = React.useMemo(
    () => validateImportUrl(importUrl),
    [importUrl]
  );

  const existingProjectNames = React.useMemo(() => {
    return state.projects.map((project) => project.path);
  }, [state.projects]);
  const projectNameValidation = React.useMemo(() => {
    if (existingProjectNames.includes(projectName)) {
      return {
        error: true,
        helperText: `A project with the name "${projectName}" already exists.`,
      };
    }
    const validation = validProjectName(projectName);
    return {
      error: !validation.valid,
      // Assign an empty space when !shouldShowProjectNameValidation
      // to prevent UI jumping because of the height of `helperText` of `TextField`.
      helperText: validation.valid ? " " : validation.reason,
    };
  }, [existingProjectNames, projectName]);

  const saveProjectName = async () => {
    if (projectNameValidation.error) return;
    setImportStatus("SAVING");
    try {
      await fetcher(`/async/projects/${newProjectUuid}`, {
        method: "PUT",
        headers: HEADER.JSON,
        body: JSON.stringify({ name: projectName }),
      });
      onImportComplete({ path: projectName, uuid: newProjectUuid });
      closeDialog();
    } catch (error) {
      // Project is imported with a uuid (i.e. `tempProjectName`), but failed to rename.
      // Because we want user to give a meaningful name before closing,
      // user is not allowed to close the dialog before successfully submit and save projectName.
      // NOTE: user will get stuck here if changing project name cannot be done.
      setImportStatus("IMPORTED");
    }
  };

  const [progress, setProgress] = React.useState<number | "unknown">("unknown");

  const progressStyle = React.useMemo<LinearProgressProps["variant"]>(() => {
    if (progress === "unknown") return "indeterminate";
    return "determinate";
  }, [progress]);

  const updateProgress = React.useCallback(
    (completedCount: number, totalCount: number) => {
      setProgress(Math.round((completedCount / totalCount) * 100));
    },
    []
  );

  const createProjectAndUploadFiles = React.useCallback(
    async (
      projectName: string,
      files: File[] | FileList,
      onFileUploaded?: (completedCount: number, totalCount: number) => void
    ) => {
      const { project_uuid } = await fetcher<{ project_uuid: string }>(
        "/async/projects",
        {
          method: "POST",
          headers: HEADER.JSON,
          body: JSON.stringify({ name: projectName }),
        }
      );
      // Update state.projects to get all the default info for this project.
      const projects = await fetcher<Project[]>("/async/projects");
      dispatch({ type: "SET_PROJECTS", payload: projects });
      // Upload files
      await Promise.all(
        generateUploadFiles({
          projectUuid: project_uuid,
          root: "/project-dir",
          path: "/",
        })(files, onFileUploaded)
      );
      return project_uuid;
    },
    [dispatch]
  );

  const uploadFilesAndSetImportStatus = React.useCallback(
    async (files: FileList | File[]) => {
      if (!tempProjectName) {
        setAlert(
          "Error",
          "Failed to create a temporary project to start uploading."
        );
        return;
      }

      setImportStatus("IMPORTING");
      const projectUuid = await createProjectAndUploadFiles(
        tempProjectName,
        files,
        updateProgress
      );
      setImportStatus("IMPORTED");
      setNewProjectUuid(projectUuid);
      setProjectName("");
    },
    [
      createProjectAndUploadFiles,
      tempProjectName,
      setImportStatus,
      setProjectName,
      setAlert,
      updateProgress,
    ]
  );

  // If `filesToUpload` is provided, it means that the parent component has gotten files already.
  // Immediately jump to `IMPORTING`.
  React.useEffect(() => {
    if (filesToUpload && tempProjectName && importStatus === "READY") {
      createProjectAndUploadFiles(
        tempProjectName,
        filesToUpload,
        updateProgress
      );
    }
  }, [
    filesToUpload,
    tempProjectName,
    importStatus,
    updateProgress,
    createProjectAndUploadFiles,
  ]);

  return (
    <Dialog
      open={open}
      onClose={isAllowedToClose ? closeDialog : undefined}
      fullWidth
      maxWidth="sm"
    >
      <DialogTitle>Import project</DialogTitle>
      <DialogContent>
        <Stack
          direction="column"
          spacing={2}
          data-test-id="import-project-dialog"
        >
          {importStatus === "READY" && (
            <>
              <Stack direction="column" spacing={1}>
                <Typography>
                  Paste <Code>HTTPS</Code> link to <Code>git</Code> repository:
                </Typography>
                <form
                  id="import-project"
                  onSubmit={(e) => {
                    e.preventDefault();
                    startImportGitRepo();
                  }}
                >
                  <TextField
                    fullWidth
                    autoFocus
                    placeholder="Git repository URL"
                    onBlur={() => setShouldShowImportUrlValidation(true)}
                    {...(shouldShowImportUrlValidation
                      ? importUrlValidation
                      : {
                          // When showing the FAILURE alert, the space of helperText should be removed.
                          // In other cases, helperText should take space to prevent UI jumping.
                          helperText:
                            importResult?.status === "FAILURE" ? "" : " ",
                        })}
                    value={importUrl}
                    onChange={(e) => setImportUrl(e.target.value)}
                    data-test-id="project-url-textfield"
                  />
                </form>
                {importResult?.status === "FAILURE" && (
                  <Alert
                    severity="error"
                    sx={{ marginTop: (theme) => theme.spacing(1) }}
                    onClose={clearImportResult}
                  >
                    Import failed: {getMappedErrorMessage(importResult.result)}
                  </Alert>
                )}
              </Stack>
              {!hideUploadOption && (
                <Stack direction="column" spacing={1}>
                  <Typography>Or upload from computer:</Typography>
                  <DropZone
                    disableOverlay
                    uploadFiles={uploadFilesAndSetImportStatus}
                  >
                    {(isDragActive: boolean) => (
                      <UploadFilesForm
                        folder
                        upload={uploadFilesAndSetImportStatus}
                      >
                        {(onClick) => (
                          <Stack
                            justifyContent="center"
                            alignItems="center"
                            direction="column"
                            spacing={1}
                            sx={{
                              height: "16vh",
                              border: (theme) =>
                                `2px dashed ${theme.palette.grey[400]}`,
                              backgroundColor: (theme) =>
                                theme.palette.common.white,
                              borderRadius: (theme) => theme.spacing(0.5),
                              cursor: "pointer",
                              "&:hover": {
                                border: (theme) =>
                                  `2px dashed ${
                                    isDragActive
                                      ? theme.palette.primary.main
                                      : theme.palette.grey[800]
                                  }`,
                                backgroundColor: (theme) =>
                                  isDragActive
                                    ? alpha(theme.palette.primary.main, 0.08)
                                    : theme.palette.grey[50],
                              },
                            }}
                            onClick={onClick}
                          >
                            <DriveFolderUploadOutlinedIcon
                              fontSize="large"
                              sx={{
                                color: (theme) =>
                                  isDragActive
                                    ? theme.palette.primary.main
                                    : theme.palette.grey[500],
                              }}
                            />
                            <Typography variant="body2">{`Drag & drop project folder here`}</Typography>
                            <Button>Browse files</Button>
                          </Stack>
                        )}
                      </UploadFilesForm>
                    )}
                  </DropZone>
                </Stack>
              )}
            </>
          )}
          {importStatus !== "READY" && (
            <Stack direction="column" spacing={2}>
              <LinearProgress
                value={progress === "unknown" ? undefined : progress}
                variant={progressStyle}
              />
              <form
                id="save-project-name"
                onSubmit={(e) => {
                  e.preventDefault();
                  saveProjectName();
                }}
              >
                <TextField
                  fullWidth
                  autoFocus
                  label="Project name"
                  value={projectName}
                  onChange={(e) => {
                    setProjectName(e.target.value.replace(/[^\w\.]/g, "-"));
                  }}
                  {...(projectName.length > 0 ? projectNameValidation : {})}
                  disabled={importStatus === "SAVING"}
                  data-test-id="project-name-textfield"
                />
              </form>
            </Stack>
          )}
        </Stack>
      </DialogContent>
      <DialogActions>
        {isAllowedToClose && (
          <Button color="secondary" onClick={closeDialog} tabIndex={-1}>
            Cancel
          </Button>
        )}
        {importStatus === "READY" ? (
          <Button
            variant="contained"
            disabled={importUrlValidation.error}
            type="submit"
            form="import-project"
            data-test-id="import-project-ok"
          >
            Import
          </Button>
        ) : (
          <Button
            variant="contained"
            disabled={
              !projectName ||
              projectNameValidation.error ||
              ["IMPORTING", "SAVING"].includes(importStatus)
            }
            type="submit"
            form="save-project-name"
          >
            Save
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
};
