#!/usr/bin/env python3

# Zero dependency shell spawner program
# Connects JupyterLab terminal to an SSH daemon
# running on an environment shell container.

import json
import os
import subprocess
import sys
from urllib import request

ORCHEST_API_ADDRESS = os.environ["ORCHEST_API_ADDRESS"]  # Includes "http://" and "/api"
ORCHEST_WEBSERVER_ADDRESS = os.environ[
    "ORCHEST_WEBSERVER_ADDRESS"
]  # Includes "http://"


def connect(environment_shell):
    user = environment_shell["user"]
    host = environment_shell["environment_shell_hostname"]
    command = f"ssh {user}@{host}"

    cp = subprocess.run(command, shell=True)
    sys.exit(cp.returncode)


def get_environments():
    req = request.Request(
        ORCHEST_WEBSERVER_ADDRESS
        + "/store/environments/"
        + os.environ["ORCHEST_PROJECT_UUID"]
    )
    req.add_header("Content-Type", "application/json")

    resp = request.urlopen(req)
    content = resp.read()
    json_resp = json.loads(content)

    return json_resp


def get_project(project_uuid):
    req = request.Request(ORCHEST_WEBSERVER_ADDRESS + "/async/projects/" + project_uuid)
    req.add_header("Content-Type", "application/json")

    resp = request.urlopen(req)
    content = resp.read()
    json_resp = json.loads(content)

    return json_resp


def spawn_environment_shell(environment):

    # Get project_dir from webserver
    project = get_project(os.environ["ORCHEST_PROJECT_UUID"])

    data = json.dumps(
        {
            "pipeline_uuid": os.environ["ORCHEST_PIPELINE_UUID"],
            "project_uuid": os.environ["ORCHEST_PROJECT_UUID"],
            "environment_uuid": environment["uuid"],
            "userdir_pvc": "userdir-pvc",  # TODO: make dynamic?
            "project_dir": "/userdir/projects/"
            + project["path"],  # TODO: make dynamic?
        }
    ).encode("utf-8")

    req = request.Request(
        ORCHEST_API_ADDRESS + "/environment_shells/", data=data, method="POST"
    )

    req.add_header("Content-Type", "application/json")

    resp = request.urlopen(req)
    content = resp.read()
    json_resp = json.loads(content)

    return json_resp


def choose_environment(environments):

    print("Available environments")
    for key, value in enumerate(environments):
        print(f"- {value['name']} ({key})")

    while True:
        try:
            print(
                f"Choose environment [0-{len(environments) - 1}]: ", end="", flush=True
            )
            user_input = input()
            environment_index = int(user_input)
            assert environment_index >= 0 and environment_index <= len(environments) - 1
            break
        except Exception:
            print("Invalid input.")
            continue

    return environments[environment_index]


if __name__ == "__main__":

    environments = get_environments()
    environment = choose_environment(environments)

    print("Connecting...", end="", flush=True)
    environment_shell = spawn_environment_shell(environment)

    connect(environment_shell)
